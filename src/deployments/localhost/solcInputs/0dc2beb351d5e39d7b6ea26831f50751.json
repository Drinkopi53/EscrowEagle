{
  "language": "Solidity",
  "sources": {
    "contracts/BonusEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// Future unit tests would typically be created in a separate file\r\n// in a Hardhat project (e.g., test/BonusEscrow.t.sol).\r\n// For this task, actual test files will not be created.\r\n//\r\n// Test cases would include:\r\n// - Deployment:\r\n//   - Check if the owner is set correctly.\r\n// - Deposit:\r\n//   - Check if ETH can be deposited.\r\n//   - Check if the contract balance increases after deposit.\r\n//   - Check if events are emitted correctly (if any).\r\n// - Access Control:\r\n//   - Ensure only the owner can call owner-restricted functions (if any).\r\n\r\ncontract BonusEscrow {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        nextBountyId = 0;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    struct Bounty {\r\n        uint256 id;\r\n        address creator;\r\n        string title;\r\n        string githubUrl;\r\n        uint256 reward;\r\n        Status status;\r\n        address acceptor; // New field to store the address of the client who accepted the bounty\r\n    }\r\n\r\n    enum Status { Open, Accepted, Completed, Paid }\r\n\r\n    uint256 nextBountyId;\r\n    mapping(uint256 => Bounty) bounties;\r\n    uint256[] bountyIds;\r\n\r\n    event BountyCreated(\r\n        uint256 indexed id,\r\n        address indexed creator,\r\n        string title,\r\n        string githubUrl,\r\n        uint256 reward\r\n    );\r\n    event BountyAccepted(uint256 indexed id, address indexed acceptor);\r\n    event BountyCompleted(uint256 indexed id);\r\n    event BountyPaid(uint256 indexed id, address indexed winner);\r\n\r\n    function createBounty(\r\n        string memory _title,\r\n        string memory _githubUrl\r\n    ) public payable {\r\n        require(msg.value > 0, \"Bounty must have a reward\");\r\n\r\n        uint256 id = nextBountyId++;\r\n        bounties[id] = Bounty({\r\n            id: id,\r\n            creator: msg.sender,\r\n            title: _title,\r\n            githubUrl: _githubUrl,\r\n            reward: msg.value,\r\n            status: Status.Open,\r\n            acceptor: address(0)\r\n        });\r\n        bountyIds.push(id);\r\n\r\n        emit BountyCreated(id, msg.sender, _title, _githubUrl, msg.value);\r\n    }\r\n\r\n    function getBountyStatus(uint256 _bountyId) public view returns (Status) {\r\n        require(_bountyId < nextBountyId, \"Bounty does not exist\");\r\n        return bounties[_bountyId].status;\r\n    }\r\n\r\n    function getAllBounties() public view returns (Bounty[] memory) {\r\n        Bounty[] memory allBounties = new Bounty[](bountyIds.length);\r\n        for (uint256 i = 0; i < bountyIds.length; i++) {\r\n            allBounties[i] = bounties[bountyIds[i]];\r\n        }\r\n        return allBounties;\r\n    }\r\n\r\n    function acceptBounty(uint256 _bountyId, address _acceptor) public {\r\n        require(bounties[_bountyId].status == Status.Open, \"Bounty is not open\");\r\n        require(msg.sender == bounties[_bountyId].creator, \"Only bounty creator can accept bounty\");\r\n        bounties[_bountyId].status = Status.Accepted;\r\n        bounties[_bountyId].acceptor = _acceptor; // Store the acceptor's address\r\n        emit BountyAccepted(_bountyId, _acceptor);\r\n    }\r\n\r\n    function completeBounty(uint256 _bountyId) public {\r\n        require(bounties[_bountyId].status == Status.Accepted, \"Bounty is not accepted\");\r\n        require(msg.sender == bounties[_bountyId].acceptor, \"Only bounty acceptor can complete bounty\");\r\n        bounties[_bountyId].status = Status.Completed;\r\n        emit BountyCompleted(_bountyId);\r\n    }\r\n\r\n    function payBounty(uint256 _bountyId, address _winner) public onlyOwner {\r\n        require(bounties[_bountyId].status == Status.Completed, \"Bounty is not completed\");\r\n        require(bounties[_bountyId].reward > 0, \"Bounty has no reward\");\r\n\r\n        // Transfer reward to the winner\r\n        payable(_winner).transfer(bounties[_bountyId].reward);\r\n        bounties[_bountyId].status = Status.Paid;\r\n        emit BountyPaid(_bountyId, _winner);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}